(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

    // 判断当前宿主环境支不支持symbol
    const supportSymbol = typeof Symbol === 'function' && Symbol.for;
    // 如果支持返回Symbol,如果不支持则返回数字
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;

    /* eslint-disable @typescript-eslint/no-explicit-any */
    // ReactElement
    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            __mark: 'KurumiRin' // react中没有该字段,仅作为该big-react标识
        };
        return element;
    };
    const jsx = (type, config, ...maybeChildren) => {
        let key = null;
        const props = {};
        let ref = null;
        // 处理config
        for (const prop in config) {
            const val = config[prop];
            // 赋值key
            if (prop === 'key') {
                if (val !== undefined) {
                    key = '' + val;
                }
                continue;
            }
            // 赋值ref
            if (prop === 'ref') {
                if (val !== undefined) {
                    ref = val;
                }
                continue;
            }
            // 判断是不是非原型链的prop
            if ({}.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        // 处理maybeChildren
        const maybeChildrenLength = maybeChildren.length;
        if (maybeChildrenLength) {
            // [child]   [child,child,child]
            if (maybeChildrenLength === 1) {
                props.children = maybeChildren[0];
            }
            else {
                props.children = maybeChildren;
            }
        }
        return ReactElement(type, key, ref, props);
    };

    // 导出react.createElement
    var index = {
        version: '0.0.0',
        createElement: jsx
    };

    return index;

}));
